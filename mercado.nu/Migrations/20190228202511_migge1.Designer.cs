// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mercado.nu.Data;

namespace mercado.nu.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190228202511_migge1")]
    partial class migge1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("mercado.nu.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<Guid>("PersonId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MarketResearchId");

                    b.Property<Guid>("PersonId");

                    b.Property<Guid>("QuestionId");

                    b.Property<string>("Value");

                    b.HasKey("AnswerId");

                    b.HasIndex("MarketResearchId");

                    b.HasIndex("PersonId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.Chapters", b =>
                {
                    b.Property<Guid>("ChaptersId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MarketResearchId");

                    b.Property<string>("Name");

                    b.HasKey("ChaptersId");

                    b.HasIndex("MarketResearchId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.Content", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Headline");

                    b.Property<bool>("Publish");

                    b.HasKey("ContentId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActualQuestion");

                    b.Property<Guid>("ChaptersId");

                    b.Property<int>("QuestionNumber");

                    b.Property<int>("QuestionType");

                    b.HasKey("QuestionId");

                    b.HasIndex("ChaptersId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.QuestionOption", b =>
                {
                    b.Property<Guid>("QuestionOptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("QuestionId");

                    b.Property<string>("QuestionOptionHeading");

                    b.Property<string>("Value");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.QuestionToMarketResearch", b =>
                {
                    b.Property<Guid>("MarketResearchId");

                    b.Property<Guid>("QuestionId");

                    b.HasKey("MarketResearchId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GetQuestionToMarketResearches");
                });

            modelBuilder.Entity("mercado.nu.Models.MarketResearch", b =>
                {
                    b.Property<Guid>("MarketResearchId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("Gender");

                    b.Property<int>("MaxAge");

                    b.Property<int>("MinAge");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfResponders");

                    b.Property<Guid?>("OrganizationId");

                    b.Property<Guid?>("PersonId");

                    b.Property<string>("Purpose");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("MarketResearchId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("MarketResearches");
                });

            modelBuilder.Entity("mercado.nu.Models.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<Guid>("ContactPersonId");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("PathLogoImage");

                    b.Property<int>("PhoneNumber");

                    b.Property<string>("StreetName");

                    b.Property<string>("StreetNumber");

                    b.HasKey("OrganizationId");

                    b.HasIndex("ContactPersonId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("mercado.nu.Models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("OrganizationId");

                    b.Property<string>("PostNumber");

                    b.Property<string>("Street");

                    b.Property<string>("StreetNumber");

                    b.HasKey("PersonId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("mercado.nu.Models.Responders", b =>
                {
                    b.Property<Guid>("MarketResearchId");

                    b.Property<Guid>("PersonId");

                    b.Property<bool>("MarketResearchCompleted");

                    b.HasKey("MarketResearchId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("Responders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("mercado.nu.Models.ApplicationUser", b =>
                {
                    b.HasOne("mercado.nu.Models.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("mercado.nu.Models.ApplicationUser", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.Answer", b =>
                {
                    b.HasOne("mercado.nu.Models.MarketResearch", "MarketResearch")
                        .WithMany("Answers")
                        .HasForeignKey("MarketResearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mercado.nu.Models.Person", "Person")
                        .WithMany("Answer")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mercado.nu.Models.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.Chapters", b =>
                {
                    b.HasOne("mercado.nu.Models.MarketResearch", "MarketResearch")
                        .WithMany("Chapters")
                        .HasForeignKey("MarketResearchId");
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.Question", b =>
                {
                    b.HasOne("mercado.nu.Models.Entities.Chapters", "Chapter")
                        .WithMany("ListOfQuestion")
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.QuestionOption", b =>
                {
                    b.HasOne("mercado.nu.Models.Entities.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mercado.nu.Models.Entities.QuestionToMarketResearch", b =>
                {
                    b.HasOne("mercado.nu.Models.MarketResearch", "MarketResearch")
                        .WithMany("Questions")
                        .HasForeignKey("MarketResearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mercado.nu.Models.Entities.Question", "Question")
                        .WithMany("MarketResearches")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mercado.nu.Models.MarketResearch", b =>
                {
                    b.HasOne("mercado.nu.Models.Organization", "Organization")
                        .WithMany("MarketResearches")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("mercado.nu.Models.Person")
                        .WithMany("MarketResearches")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("mercado.nu.Models.Organization", b =>
                {
                    b.HasOne("mercado.nu.Models.Person", "ContactPerson")
                        .WithMany("ContactPersonOrganizations")
                        .HasForeignKey("ContactPersonId")
                        .HasConstraintName("ForeignKey_ContacPersonOrganisation_ContactPerson")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mercado.nu.Models.Person", b =>
                {
                    b.HasOne("mercado.nu.Models.Organization")
                        .WithMany("Persons")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("mercado.nu.Models.Responders", b =>
                {
                    b.HasOne("mercado.nu.Models.MarketResearch", "MarketResearchs")
                        .WithMany("Responders")
                        .HasForeignKey("MarketResearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mercado.nu.Models.Person", "Persons")
                        .WithMany("Responders")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("mercado.nu.Models.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("mercado.nu.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("mercado.nu.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("mercado.nu.Models.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mercado.nu.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("mercado.nu.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
